[
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/\")",
    "context_after":"async def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")",
    "target_line":"async def root():",
    "context_after":"    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():",
    "target_line":"return {\"message\": \"Hello World\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>",
    "context_after":"\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n",
    "target_line":"<span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ",
    "context_after":"\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n",
    "target_line":"Searching for package file structure from directories",
    "context_after":"             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories",
    "target_line":"with <font color=\"#3465A4\">__init__.py<\/font> files",
    "context_after":"             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files",
    "target_line":"Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>",
    "context_after":"\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py",
    "context_after":"\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with",
    "context_after":"             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with",
    "target_line":"the following code:",
    "context_after":"\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n",
    "target_line":"<u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>",
    "context_after":"\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:"
  },
  {
    "context_before":"$ <font color=\"#4E9A06\">fastapi<\/font> dev <u style=\"text-decoration-style:solid\">main.py<\/u>\n\n  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>",
    "context_after":"\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:"
  },
  {
    "context_before":"  <span style=\"background-color:#009485\"><font color=\"#D3D7CF\"> FastAPI <\/font><\/span>  Starting development server üöÄ\n\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>",
    "context_after":"   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C"
  },
  {
    "context_before":"\n             Searching for package file structure from directories\n             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>",
    "context_after":"\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>"
  },
  {
    "context_before":"             with <font color=\"#3465A4\">__init__.py<\/font> files\n             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:",
    "context_after":"             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>"
  },
  {
    "context_before":"             Importing from <font color=\"#75507B\">\/home\/user\/code\/<\/font><font color=\"#AD7FA8\">awesomeapp<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> module <\/font><\/span>  üêç main.py\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:",
    "target_line":"<b>fastapi run<\/b>",
    "context_after":"\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup."
  },
  {
    "context_before":"     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> code <\/font><\/span>  Importing the FastAPI app object from the module with\n             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:",
    "context_after":"             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup.\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Application startup complete."
  },
  {
    "context_before":"             the following code:\n\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:",
    "target_line":"<b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>",
    "context_after":"     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup.\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Application startup complete."
  },
  {
    "context_before":"\n             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C",
    "context_after":"             to quit<b>)<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup.\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Application startup complete."
  },
  {
    "context_before":"             <u style=\"text-decoration-style:solid\">from <\/u><u style=\"text-decoration-style:solid\"><b>main<\/b><\/u><u style=\"text-decoration-style:solid\"> import <\/u><u style=\"text-decoration-style:solid\"><b>app<\/b><\/u>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C",
    "target_line":"to quit<b>)<\/b>",
    "context_after":"     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup.\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Application startup complete."
  },
  {
    "context_before":"\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles",
    "context_after":"     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup.\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Application startup complete."
  },
  {
    "context_before":"      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> app <\/font><\/span>  Using import string: <font color=\"#3465A4\">main:app<\/font>\n\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>",
    "context_after":"     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup.\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Application startup complete."
  },
  {
    "context_before":"\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup.",
    "context_after":"     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Application startup complete."
  },
  {
    "context_before":"   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Server started at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font>\n   <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> server <\/font><\/span>  Documentation at <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000\/docs<\/u><\/font>\n\n      <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> tip <\/font><\/span>  Running in development mode, for production use:\n             <b>fastapi run<\/b>\n\n             Logs:\n\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Will watch for changes in these directories:\n             <b>[<\/b><font color=\"#4E9A06\">&apos;\/home\/user\/code\/awesomeapp&apos;<\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Uvicorn running on <font color=\"#729FCF\"><u style=\"text-decoration-style:solid\">http:\/\/127.0.0.1:8000<\/u><\/font> <b>(<\/b>Press CTRL+C\n             to quit<b>)<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started reloader process <b>[<\/b><font color=\"#34E2E2\"><b>383138<\/b><\/font><b>]<\/b> using WatchFiles\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Started server process <b>[<\/b><font color=\"#34E2E2\"><b>383153<\/b><\/font><b>]<\/b>\n     <span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Waiting for application startup.",
    "target_line":"<span style=\"background-color:#007166\"><font color=\"#D3D7CF\"> INFO <\/font><\/span>  Application startup complete.",
    "context_after":""
  },
  {
    "context_before":"{",
    "target_line":"\"openapi\": \"3.1.0\",",
    "context_after":"    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\","
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",",
    "target_line":"\"info\": {",
    "context_after":"        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {"
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {",
    "target_line":"\"title\": \"FastAPI\",",
    "context_after":"        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application\/json\": {"
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",",
    "target_line":"\"version\": \"0.1.0\"",
    "context_after":"    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application\/json\": {\n"
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },",
    "target_line":"\"paths\": {",
    "context_after":"        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application\/json\": {\n\n\n"
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {",
    "target_line":"\"\/items\/\": {",
    "context_after":"            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application\/json\": {\n\n\n\n..."
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {",
    "target_line":"\"get\": {",
    "context_after":"                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application\/json\": {\n\n\n\n..."
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {",
    "target_line":"\"responses\": {",
    "context_after":"                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application\/json\": {\n\n\n\n..."
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {",
    "target_line":"\"200\": {",
    "context_after":"                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application\/json\": {\n\n\n\n..."
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {",
    "target_line":"\"description\": \"Successful Response\",",
    "context_after":"                        \"content\": {\n                            \"application\/json\": {\n\n\n\n..."
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",",
    "target_line":"\"content\": {",
    "context_after":"                            \"application\/json\": {\n\n\n\n..."
  },
  {
    "context_before":"{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {",
    "target_line":"\"application\/json\": {",
    "context_after":"\n\n\n..."
  },
  {
    "context_before":"    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"\/items\/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application\/json\": {\n\n\n",
    "target_line":"...",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/\")",
    "context_after":"async def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")",
    "target_line":"async def root():",
    "context_after":"    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():",
    "target_line":"return {\"message\": \"Hello World\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/\")",
    "context_after":"async def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")",
    "target_line":"async def root():",
    "context_after":"    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():",
    "target_line":"return {\"message\": \"Hello World\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/\")",
    "context_after":"async def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")",
    "target_line":"async def root():",
    "context_after":"    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():",
    "target_line":"return {\"message\": \"Hello World\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/\")",
    "context_after":"async def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")",
    "target_line":"async def root():",
    "context_after":"    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():",
    "target_line":"return {\"message\": \"Hello World\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/\")\ndef root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/\")\ndef root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/\")",
    "context_after":"def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")",
    "target_line":"def root():",
    "context_after":"    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")\ndef root():",
    "target_line":"return {\"message\": \"Hello World\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/\")",
    "context_after":"async def root():\n    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")",
    "target_line":"async def root():",
    "context_after":"    return {\"message\": \"Hello World\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/\")\nasync def root():",
    "target_line":"return {\"message\": \"Hello World\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_item(item_id):\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_item(item_id):",
    "context_after":"    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id):",
    "target_line":"return {\"item_id\": item_id}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_item(item_id: int):\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_item(item_id: int):",
    "context_after":"    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: int):",
    "target_line":"return {\"item_id\": item_id}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/users\/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"\/users\/{user_id}\")"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/users\/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"\/users\/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/users\/me\")",
    "context_after":"async def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"\/users\/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/me\")",
    "target_line":"async def read_user_me():",
    "context_after":"    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"\/users\/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/me\")\nasync def read_user_me():",
    "target_line":"return {\"user_id\": \"the current user\"}",
    "context_after":"\n\n@app.get(\"\/users\/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n",
    "target_line":"@app.get(\"\/users\/{user_id}\")",
    "context_after":"async def read_user(user_id: str):\n    return {\"user_id\": user_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"\/users\/{user_id}\")",
    "target_line":"async def read_user(user_id: str):",
    "context_after":"    return {\"user_id\": user_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"\/users\/{user_id}\")\nasync def read_user(user_id: str):",
    "target_line":"return {\"user_id\": user_id}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"\/users\")"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"\/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/users\")",
    "context_after":"async def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"\/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\")",
    "target_line":"async def read_users():",
    "context_after":"    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"\/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\")\nasync def read_users():",
    "target_line":"return [\"Rick\", \"Morty\"]",
    "context_after":"\n\n@app.get(\"\/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n",
    "target_line":"@app.get(\"\/users\")",
    "context_after":"async def read_users2():\n    return [\"Bean\", \"Elfo\"]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"\/users\")",
    "target_line":"async def read_users2():",
    "context_after":"    return [\"Bean\", \"Elfo\"]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"\/users\")\nasync def read_users2():",
    "target_line":"return [\"Bean\", \"Elfo\"]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from enum import Enum",
    "context_after":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n"
  },
  {
    "context_before":"from enum import Enum\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n",
    "target_line":"class ModelName(str, Enum):",
    "context_after":"    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):",
    "target_line":"alexnet = \"alexnet\"",
    "context_after":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"",
    "target_line":"resnet = \"resnet\"",
    "context_after":"    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"",
    "target_line":"lenet = \"lenet\"",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/models\/{model_name}\")",
    "context_after":"async def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")",
    "target_line":"async def get_model(model_name: ModelName):",
    "context_after":"    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):",
    "target_line":"if model_name is ModelName.alexnet:",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}",
    "context_after":"\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n",
    "target_line":"if model_name.value == \"lenet\":",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"class ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":",
    "target_line":"return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}",
    "context_after":"\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Have some residuals\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from enum import Enum",
    "context_after":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n"
  },
  {
    "context_before":"from enum import Enum\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n",
    "target_line":"class ModelName(str, Enum):",
    "context_after":"    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):",
    "target_line":"alexnet = \"alexnet\"",
    "context_after":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"",
    "target_line":"resnet = \"resnet\"",
    "context_after":"    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"",
    "target_line":"lenet = \"lenet\"",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/models\/{model_name}\")",
    "context_after":"async def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")",
    "target_line":"async def get_model(model_name: ModelName):",
    "context_after":"    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):",
    "target_line":"if model_name is ModelName.alexnet:",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}",
    "context_after":"\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n",
    "target_line":"if model_name.value == \"lenet\":",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"class ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":",
    "target_line":"return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}",
    "context_after":"\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Have some residuals\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from enum import Enum",
    "context_after":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n"
  },
  {
    "context_before":"from enum import Enum\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n",
    "target_line":"class ModelName(str, Enum):",
    "context_after":"    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):",
    "target_line":"alexnet = \"alexnet\"",
    "context_after":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"",
    "target_line":"resnet = \"resnet\"",
    "context_after":"    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"",
    "target_line":"lenet = \"lenet\"",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/models\/{model_name}\")",
    "context_after":"async def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")",
    "target_line":"async def get_model(model_name: ModelName):",
    "context_after":"    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):",
    "target_line":"if model_name is ModelName.alexnet:",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}",
    "context_after":"\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n",
    "target_line":"if model_name.value == \"lenet\":",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"class ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":",
    "target_line":"return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}",
    "context_after":"\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Have some residuals\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from enum import Enum",
    "context_after":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n"
  },
  {
    "context_before":"from enum import Enum\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n",
    "target_line":"class ModelName(str, Enum):",
    "context_after":"    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):",
    "target_line":"alexnet = \"alexnet\"",
    "context_after":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"",
    "target_line":"resnet = \"resnet\"",
    "context_after":"    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"",
    "target_line":"lenet = \"lenet\"",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/models\/{model_name}\")",
    "context_after":"async def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")",
    "target_line":"async def get_model(model_name: ModelName):",
    "context_after":"    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):",
    "target_line":"if model_name is ModelName.alexnet:",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}",
    "context_after":"\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n",
    "target_line":"if model_name.value == \"lenet\":",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"class ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":",
    "target_line":"return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}",
    "context_after":"\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Have some residuals\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from enum import Enum",
    "context_after":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n"
  },
  {
    "context_before":"from enum import Enum\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n",
    "target_line":"class ModelName(str, Enum):",
    "context_after":"    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):",
    "target_line":"alexnet = \"alexnet\"",
    "context_after":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"",
    "target_line":"resnet = \"resnet\"",
    "context_after":"    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"",
    "target_line":"lenet = \"lenet\"",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/models\/{model_name}\")",
    "context_after":"async def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")",
    "target_line":"async def get_model(model_name: ModelName):",
    "context_after":"    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):",
    "target_line":"if model_name is ModelName.alexnet:",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}",
    "context_after":"\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n",
    "target_line":"if model_name.value == \"lenet\":",
    "context_after":"        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"class ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":",
    "target_line":"return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}",
    "context_after":"\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
  },
  {
    "context_before":"    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"\/models\/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n",
    "target_line":"return {\"model_name\": model_name, \"message\": \"Have some residuals\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/files\/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/files\/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/files\/{file_path:path}\")",
    "context_after":"async def read_file(file_path: str):\n    return {\"file_path\": file_path}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/files\/{file_path:path}\")",
    "target_line":"async def read_file(file_path: str):",
    "context_after":"    return {\"file_path\": file_path}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/files\/{file_path:path}\")\nasync def read_file(file_path: str):",
    "target_line":"return {\"file_path\": file_path}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"\/items\/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"\/items\/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n",
    "target_line":"fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_item(skip: int = 0, limit: int = 10):",
    "context_after":"    return fake_items_db[skip : skip + limit]"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"\/items\/\")\nasync def read_item(skip: int = 0, limit: int = 10):",
    "target_line":"return fake_items_db[skip : skip + limit]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_item(item_id: str, q: str | None = None):",
    "context_after":"    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:",
    "target_line":"return {\"item_id\": item_id, \"q\": q}",
    "context_after":"    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}",
    "target_line":"return {\"item_id\": item_id}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_item(item_id: str, q: Union[str, None] = None):",
    "context_after":"    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:",
    "target_line":"return {\"item_id\": item_id, \"q\": q}",
    "context_after":"    return {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}",
    "target_line":"return {\"item_id\": item_id}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_item(item_id: str, q: str | None = None, short: bool = False):",
    "context_after":"    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):",
    "target_line":"item = {\"item_id\": item_id}",
    "context_after":"    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:",
    "target_line":"item.update({\"q\": q})",
    "context_after":"    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})",
    "target_line":"if not short:",
    "context_after":"        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:",
    "target_line":"item.update(",
    "context_after":"            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(",
    "target_line":"{\"description\": \"This is an amazing item that has a long description\"}",
    "context_after":"        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):",
    "context_after":"    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):",
    "target_line":"item = {\"item_id\": item_id}",
    "context_after":"    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:",
    "target_line":"item.update({\"q\": q})",
    "context_after":"    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})",
    "target_line":"if not short:",
    "context_after":"        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:",
    "target_line":"item.update(",
    "context_after":"            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(",
    "target_line":"{\"description\": \"This is an amazing item that has a long description\"}",
    "context_after":"        )\n    return item"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/users\/{user_id}\/items\/{item_id}\")",
    "context_after":"async def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")",
    "target_line":"async def read_user_item(",
    "context_after":"    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(",
    "target_line":"user_id: int, item_id: str, q: str | None = None, short: bool = False",
    "context_after":"):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):",
    "target_line":"item = {\"item_id\": item_id, \"owner_id\": user_id}",
    "context_after":"    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:",
    "target_line":"item.update({\"q\": q})",
    "context_after":"    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})",
    "target_line":"if not short:",
    "context_after":"        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:",
    "target_line":"item.update(",
    "context_after":"            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(",
    "target_line":"{\"description\": \"This is an amazing item that has a long description\"}",
    "context_after":"        )\n    return item"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/users\/{user_id}\/items\/{item_id}\")",
    "context_after":"async def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")",
    "target_line":"async def read_user_item(",
    "context_after":"    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(",
    "target_line":"user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False",
    "context_after":"):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):",
    "target_line":"item = {\"item_id\": item_id, \"owner_id\": user_id}",
    "context_after":"    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:",
    "target_line":"item.update({\"q\": q})",
    "context_after":"    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})",
    "target_line":"if not short:",
    "context_after":"        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:",
    "target_line":"item.update(",
    "context_after":"            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(",
    "target_line":"{\"description\": \"This is an amazing item that has a long description\"}",
    "context_after":"        )\n    return item"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\n@app.get(\"\/users\/{user_id}\/items\/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_user_item(item_id: str, needy: str):",
    "context_after":"    item = {\"item_id\": item_id, \"needy\": needy}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):",
    "target_line":"item = {\"item_id\": item_id, \"needy\": needy}",
    "context_after":"    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_user_item(",
    "context_after":"    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(",
    "target_line":"item_id: str, needy: str, skip: int = 0, limit: int | None = None",
    "context_after":"):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):",
    "target_line":"item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}",
    "context_after":"    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_user_item(",
    "context_after":"    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(",
    "target_line":"item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None",
    "context_after":"):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):",
    "target_line":"item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}",
    "context_after":"    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item):",
    "context_after":"    return item"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item):",
    "context_after":"    return item"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item):",
    "context_after":"    return item"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item):",
    "context_after":"    return item"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item):",
    "context_after":"    return item"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item):\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item):",
    "context_after":"    return item"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):",
    "target_line":"return item",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item):",
    "context_after":"    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):",
    "target_line":"item_dict = item.dict()",
    "context_after":"    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()",
    "target_line":"if item.tax is not None:",
    "context_after":"        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:",
    "target_line":"price_with_tax = item.price + item.tax",
    "context_after":"        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax",
    "target_line":"item_dict.update({\"price_with_tax\": price_with_tax})",
    "context_after":"    return item_dict"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})",
    "target_line":"return item_dict",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item):",
    "context_after":"    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):",
    "target_line":"item_dict = item.dict()",
    "context_after":"    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()",
    "target_line":"if item.tax is not None:",
    "context_after":"        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:",
    "target_line":"price_with_tax = item.price + item.tax",
    "context_after":"        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax",
    "target_line":"item_dict.update({\"price_with_tax\": price_with_tax})",
    "context_after":"    return item_dict"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})",
    "target_line":"return item_dict",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item):",
    "context_after":"    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):",
    "target_line":"return {\"item_id\": item_id, **item.dict()}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item):",
    "context_after":"    return {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item):",
    "target_line":"return {\"item_id\": item_id, **item.dict()}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item, q: str | None = None):",
    "context_after":"    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):",
    "target_line":"result = {\"item_id\": item_id, **item.dict()}",
    "context_after":"    if q:\n        result.update({\"q\": q})\n    return result"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:",
    "target_line":"result.update({\"q\": q})",
    "context_after":"    return result"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})",
    "target_line":"return result",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item, q: Union[str, None] = None):",
    "context_after":"    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result"
  },
  {
    "context_before":"from pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):",
    "target_line":"result = {\"item_id\": item_id, **item.dict()}",
    "context_after":"    if q:\n        result.update({\"q\": q})\n    return result"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:",
    "target_line":"result.update({\"q\": q})",
    "context_after":"    return result"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})",
    "target_line":"return result",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "target_line":"tags: list[str] = []",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return ["
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item) -> Item:",
    "context_after":"    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:",
    "target_line":"return item",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items() -> list[Item]:",
    "context_after":"    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:",
    "target_line":"return [",
    "context_after":"        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [",
    "target_line":"Item(name=\"Portal Gun\", price=42.0),",
    "context_after":"        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),",
    "target_line":"Item(name=\"Plumbus\", price=32.0),",
    "context_after":"    ]"
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "target_line":"tags: list[str] = []",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return ["
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item) -> Item:",
    "context_after":"    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:",
    "target_line":"return item",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items() -> list[Item]:",
    "context_after":"    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:",
    "target_line":"return [",
    "context_after":"        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [",
    "target_line":"Item(name=\"Portal Gun\", price=42.0),",
    "context_after":"        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),",
    "target_line":"Item(name=\"Plumbus\", price=32.0),",
    "context_after":"    ]"
  },
  {
    "context_before":"",
    "target_line":"from typing import List, Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import List, Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> List[Item]:"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "target_line":"tags: List[str] = []",
    "context_after":"\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> List[Item]:\n    return ["
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n",
    "target_line":"@app.post(\"\/items\/\")",
    "context_after":"async def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")",
    "target_line":"async def create_item(item: Item) -> Item:",
    "context_after":"    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:",
    "target_line":"return item",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items() -> List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items() -> List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items() -> List[Item]:",
    "context_after":"    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> List[Item]:",
    "target_line":"return [",
    "context_after":"        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> List[Item]:\n    return [",
    "target_line":"Item(name=\"Portal Gun\", price=42.0),",
    "context_after":"        Item(name=\"Plumbus\", price=32.0),\n    ]"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"\/items\/\")\nasync def read_items() -> List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),",
    "target_line":"Item(name=\"Plumbus\", price=32.0),",
    "context_after":"    ]"
  },
  {
    "context_before":"",
    "target_line":"from typing import Any",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None"
  },
  {
    "context_before":"from typing import Any\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "target_line":"tags: list[str] = []",
    "context_after":"\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return ["
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n",
    "target_line":"@app.post(\"\/items\/\", response_model=Item)",
    "context_after":"async def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)",
    "target_line":"async def create_item(item: Item) -> Any:",
    "context_after":"    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:",
    "target_line":"return item",
    "context_after":"\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n",
    "target_line":"@app.get(\"\/items\/\", response_model=list[Item])",
    "context_after":"async def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])",
    "target_line":"async def read_items() -> Any:",
    "context_after":"    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:",
    "target_line":"return [",
    "context_after":"        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [",
    "target_line":"{\"name\": \"Portal Gun\", \"price\": 42.0},",
    "context_after":"        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},",
    "target_line":"{\"name\": \"Plumbus\", \"price\": 32.0},",
    "context_after":"    ]"
  },
  {
    "context_before":"",
    "target_line":"from typing import Any, Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Any, Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "target_line":"tags: list[str] = []",
    "context_after":"\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return ["
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n",
    "target_line":"@app.post(\"\/items\/\", response_model=Item)",
    "context_after":"async def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)",
    "target_line":"async def create_item(item: Item) -> Any:",
    "context_after":"    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:",
    "target_line":"return item",
    "context_after":"\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n",
    "target_line":"@app.get(\"\/items\/\", response_model=list[Item])",
    "context_after":"async def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])",
    "target_line":"async def read_items() -> Any:",
    "context_after":"    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:",
    "target_line":"return [",
    "context_after":"        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [",
    "target_line":"{\"name\": \"Portal Gun\", \"price\": 42.0},",
    "context_after":"        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},",
    "target_line":"{\"name\": \"Plumbus\", \"price\": 32.0},",
    "context_after":"    ]"
  },
  {
    "context_before":"",
    "target_line":"from typing import Any, List, Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Any, List, Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Any, List, Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []"
  },
  {
    "context_before":"from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n"
  },
  {
    "context_before":"from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item"
  },
  {
    "context_before":"from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n"
  },
  {
    "context_before":"from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n"
  },
  {
    "context_before":"from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])"
  },
  {
    "context_before":"from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])\nasync def read_items() -> Any:"
  },
  {
    "context_before":"from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "target_line":"tags: List[str] = []",
    "context_after":"\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])\nasync def read_items() -> Any:\n    return ["
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n",
    "target_line":"@app.post(\"\/items\/\", response_model=Item)",
    "context_after":"async def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)",
    "target_line":"async def create_item(item: Item) -> Any:",
    "context_after":"    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:",
    "target_line":"return item",
    "context_after":"\n\n@app.get(\"\/items\/\", response_model=List[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n",
    "target_line":"@app.get(\"\/items\/\", response_model=List[Item])",
    "context_after":"async def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])",
    "target_line":"async def read_items() -> Any:",
    "context_after":"    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])\nasync def read_items() -> Any:",
    "target_line":"return [",
    "context_after":"        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])\nasync def read_items() -> Any:\n    return [",
    "target_line":"{\"name\": \"Portal Gun\", \"price\": 42.0},",
    "context_after":"        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"\/items\/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"\/items\/\", response_model=List[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},",
    "target_line":"{\"name\": \"Plumbus\", \"price\": 32.0},",
    "context_after":"    ]"
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!",
    "target_line":"@app.post(\"\/user\/\")",
    "context_after":"async def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")",
    "target_line":"async def create_user(user: UserIn) -> UserIn:",
    "context_after":"    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!",
    "target_line":"@app.post(\"\/user\/\")",
    "context_after":"async def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")",
    "target_line":"async def create_user(user: UserIn) -> UserIn:",
    "context_after":"    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!",
    "target_line":"@app.post(\"\/user\/\")",
    "context_after":"async def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")",
    "target_line":"async def create_user(user: UserIn) -> UserIn:",
    "context_after":"    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!",
    "target_line":"@app.post(\"\/user\/\")",
    "context_after":"async def create_user(user: UserIn) -> UserIn:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")",
    "target_line":"async def create_user(user: UserIn) -> UserIn:",
    "context_after":"    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> UserIn:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Any",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str"
  },
  {
    "context_before":"from typing import Any\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n",
    "target_line":"class UserOut(BaseModel):",
    "context_after":"    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):",
    "target_line":"username: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n",
    "target_line":"@app.post(\"\/user\/\", response_model=UserOut)",
    "context_after":"async def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)",
    "target_line":"async def create_user(user: UserIn) -> Any:",
    "context_after":"    return user"
  },
  {
    "context_before":"class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Any, Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str"
  },
  {
    "context_before":"from typing import Any, Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n",
    "target_line":"class UserOut(BaseModel):",
    "context_after":"    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):",
    "target_line":"username: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.post(\"\/user\/\", response_model=UserOut)",
    "context_after":"async def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)",
    "target_line":"async def create_user(user: UserIn) -> Any:",
    "context_after":"    return user"
  },
  {
    "context_before":"class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Any",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str"
  },
  {
    "context_before":"from typing import Any\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n",
    "target_line":"class UserOut(BaseModel):",
    "context_after":"    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):",
    "target_line":"username: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n",
    "target_line":"@app.post(\"\/user\/\", response_model=UserOut)",
    "context_after":"async def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)",
    "target_line":"async def create_user(user: UserIn) -> Any:",
    "context_after":"    return user"
  },
  {
    "context_before":"class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Any, Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str"
  },
  {
    "context_before":"from typing import Any, Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n",
    "target_line":"class UserOut(BaseModel):",
    "context_after":"    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):",
    "target_line":"username: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.post(\"\/user\/\", response_model=UserOut)",
    "context_after":"async def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)",
    "target_line":"async def create_user(user: UserIn) -> Any:",
    "context_after":"    return user"
  },
  {
    "context_before":"class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Any",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str"
  },
  {
    "context_before":"from typing import Any\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:"
  },
  {
    "context_before":"from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n",
    "target_line":"class UserOut(BaseModel):",
    "context_after":"    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):",
    "target_line":"username: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n",
    "target_line":"@app.post(\"\/user\/\", response_model=UserOut)",
    "context_after":"async def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)",
    "target_line":"async def create_user(user: UserIn) -> Any:",
    "context_after":"    return user"
  },
  {
    "context_before":"class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Any, Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str"
  },
  {
    "context_before":"from typing import Any, Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class UserIn(BaseModel):",
    "context_after":"    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):",
    "target_line":"username: str",
    "context_after":"    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str",
    "target_line":"password: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:"
  },
  {
    "context_before":"from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n",
    "target_line":"class UserOut(BaseModel):",
    "context_after":"    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):",
    "target_line":"username: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.post(\"\/user\/\", response_model=UserOut)",
    "context_after":"async def create_user(user: UserIn) -> Any:\n    return user"
  },
  {
    "context_before":"\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)",
    "target_line":"async def create_user(user: UserIn) -> Any:",
    "context_after":"    return user"
  },
  {
    "context_before":"class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"\/user\/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class BaseUser(BaseModel):",
    "context_after":"    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):",
    "target_line":"username: str",
    "context_after":"    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n",
    "target_line":"class UserIn(BaseUser):",
    "context_after":"    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):",
    "target_line":"password: str",
    "context_after":"\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n",
    "target_line":"@app.post(\"\/user\/\")",
    "context_after":"async def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")",
    "target_line":"async def create_user(user: UserIn) -> BaseUser:",
    "context_after":"    return user"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel, EmailStr",
    "context_after":"\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n",
    "target_line":"class BaseUser(BaseModel):",
    "context_after":"    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):",
    "target_line":"username: str",
    "context_after":"    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str",
    "target_line":"email: EmailStr",
    "context_after":"    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n",
    "target_line":"class UserIn(BaseUser):",
    "context_after":"    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):",
    "target_line":"password: str",
    "context_after":"\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"from pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n",
    "target_line":"@app.post(\"\/user\/\")",
    "context_after":"async def create_user(user: UserIn) -> BaseUser:\n    return user"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")",
    "target_line":"async def create_user(user: UserIn) -> BaseUser:",
    "context_after":"    return user"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"\/user\/\")\nasync def create_user(user: UserIn) -> BaseUser:",
    "target_line":"return user",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Response",
    "context_after":"from fastapi.responses import JSONResponse, RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})"
  },
  {
    "context_before":"from fastapi import FastAPI, Response",
    "target_line":"from fastapi.responses import JSONResponse, RedirectResponse",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse, RedirectResponse\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse, RedirectResponse\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/portal\")",
    "context_after":"async def get_portal(teleport: bool = False) -> Response:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse, RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")",
    "target_line":"async def get_portal(teleport: bool = False) -> Response:",
    "context_after":"    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse, RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response:",
    "target_line":"if teleport:",
    "context_after":"        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse, RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response:\n    if teleport:",
    "target_line":"return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "context_after":"    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse, RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "target_line":"return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/teleport\")\nasync def get_teleport() -> RedirectResponse:\n    return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from fastapi.responses import RedirectResponse",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/teleport\")\nasync def get_teleport() -> RedirectResponse:\n    return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/teleport\")\nasync def get_teleport() -> RedirectResponse:\n    return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/teleport\")",
    "context_after":"async def get_teleport() -> RedirectResponse:\n    return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/teleport\")",
    "target_line":"async def get_teleport() -> RedirectResponse:",
    "context_after":"    return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/teleport\")\nasync def get_teleport() -> RedirectResponse:",
    "target_line":"return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Response",
    "context_after":"from fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response",
    "target_line":"from fastapi.responses import RedirectResponse",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/portal\")",
    "context_after":"async def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")",
    "target_line":"async def get_portal(teleport: bool = False) -> Response | dict:",
    "context_after":"    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response | dict:",
    "target_line":"if teleport:",
    "context_after":"        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:",
    "target_line":"return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "context_after":"    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "target_line":"return {\"message\": \"Here's your interdimensional portal.\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI, Response",
    "context_after":"from fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response",
    "target_line":"from fastapi.responses import RedirectResponse",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/portal\")",
    "context_after":"async def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")",
    "target_line":"async def get_portal(teleport: bool = False) -> Union[Response, dict]:",
    "context_after":"    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:",
    "target_line":"if teleport:",
    "context_after":"        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:",
    "target_line":"return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "context_after":"    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "target_line":"return {\"message\": \"Here's your interdimensional portal.\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Response",
    "context_after":"from fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response",
    "target_line":"from fastapi.responses import RedirectResponse",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/portal\", response_model=None)",
    "context_after":"async def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)",
    "target_line":"async def get_portal(teleport: bool = False) -> Response | dict:",
    "context_after":"    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Response | dict:",
    "target_line":"if teleport:",
    "context_after":"        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:",
    "target_line":"return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "context_after":"    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "target_line":"return {\"message\": \"Here's your interdimensional portal.\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI, Response",
    "context_after":"from fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response",
    "target_line":"from fastapi.responses import RedirectResponse",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/portal\", response_model=None)",
    "context_after":"async def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)",
    "target_line":"async def get_portal(teleport: bool = False) -> Union[Response, dict]:",
    "context_after":"    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:",
    "target_line":"if teleport:",
    "context_after":"        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:",
    "target_line":"return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "context_after":"    return {\"message\": \"Here's your interdimensional portal.\"}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"\/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\")",
    "target_line":"return {\"message\": \"Here's your interdimensional portal.\"}",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5",
    "target_line":"tags: list[str] = []",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},",
    "context_after":"}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "context_after":"async def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "target_line":"async def read_item(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5",
    "target_line":"tags: list[str] = []",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},",
    "context_after":"}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "context_after":"async def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "target_line":"async def read_item(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import List, Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import List, Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5",
    "target_line":"tags: List[str] = []",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},",
    "context_after":"}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "context_after":"async def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "target_line":"async def read_item(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5",
    "target_line":"tags: list[str] = []",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},",
    "context_after":"}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "context_after":"async def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "target_line":"async def read_item(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5",
    "target_line":"tags: list[str] = []",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},",
    "context_after":"}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "context_after":"async def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "target_line":"async def read_item(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import List, Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import List, Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n"
  },
  {
    "context_before":"from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5",
    "target_line":"tags: List[str] = []",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},",
    "context_after":"}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "context_after":"async def read_item(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)",
    "target_line":"async def read_item(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"\/items\/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\","
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\","
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get("
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {",
    "context_after":"        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\","
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {",
    "target_line":"\"name\": \"Baz\",",
    "context_after":"        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",",
    "target_line":"\"description\": \"There goes my baz\",",
    "context_after":"        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",",
    "target_line":"\"price\": 50.2,",
    "context_after":"        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,",
    "target_line":"\"tax\": 10.5,",
    "context_after":"    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):"
  },
  {
    "context_before":"    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n",
    "target_line":"@app.get(",
    "context_after":"    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):"
  },
  {
    "context_before":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(",
    "target_line":"\"\/items\/{item_id}\/name\",",
    "context_after":"    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",",
    "target_line":"response_model=Item,",
    "context_after":"    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,",
    "target_line":"response_model_include={\"name\", \"description\"},",
    "context_after":")\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)",
    "target_line":"async def read_item_name(item_id: str):",
    "context_after":"    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})",
    "context_after":"async def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})",
    "target_line":"async def read_item_public_data(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\","
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\","
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get("
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {",
    "context_after":"        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\","
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {",
    "target_line":"\"name\": \"Baz\",",
    "context_after":"        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",",
    "target_line":"\"description\": \"There goes my baz\",",
    "context_after":"        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",",
    "target_line":"\"price\": 50.2,",
    "context_after":"        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,",
    "target_line":"\"tax\": 10.5,",
    "context_after":"    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):"
  },
  {
    "context_before":"    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n",
    "target_line":"@app.get(",
    "context_after":"    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):"
  },
  {
    "context_before":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(",
    "target_line":"\"\/items\/{item_id}\/name\",",
    "context_after":"    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",",
    "target_line":"response_model=Item,",
    "context_after":"    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,",
    "target_line":"response_model_include={\"name\", \"description\"},",
    "context_after":")\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)",
    "target_line":"async def read_item_name(item_id: str):",
    "context_after":"    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})",
    "context_after":"async def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})",
    "target_line":"async def read_item_public_data(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\","
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\","
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get("
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {",
    "context_after":"        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\","
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {",
    "target_line":"\"name\": \"Baz\",",
    "context_after":"        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",",
    "target_line":"\"description\": \"There goes my baz\",",
    "context_after":"        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",",
    "target_line":"\"price\": 50.2,",
    "context_after":"        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,",
    "target_line":"\"tax\": 10.5,",
    "context_after":"    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):"
  },
  {
    "context_before":"    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n",
    "target_line":"@app.get(",
    "context_after":"    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):"
  },
  {
    "context_before":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(",
    "target_line":"\"\/items\/{item_id}\/name\",",
    "context_after":"    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",",
    "target_line":"response_model=Item,",
    "context_after":"    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,",
    "target_line":"response_model_include=[\"name\", \"description\"],",
    "context_after":")\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)",
    "target_line":"async def read_item_name(item_id: str):",
    "context_after":"    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])",
    "context_after":"async def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])",
    "target_line":"async def read_item_public_data(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\","
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\","
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: float = 10.5",
    "context_after":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n",
    "target_line":"items = {",
    "context_after":"    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {",
    "target_line":"\"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "context_after":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},",
    "target_line":"\"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},",
    "context_after":"    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get("
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},",
    "target_line":"\"baz\": {",
    "context_after":"        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\","
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {",
    "target_line":"\"name\": \"Baz\",",
    "context_after":"        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",",
    "target_line":"\"description\": \"There goes my baz\",",
    "context_after":"        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",",
    "target_line":"\"price\": 50.2,",
    "context_after":"        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,",
    "target_line":"\"tax\": 10.5,",
    "context_after":"    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):"
  },
  {
    "context_before":"    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n",
    "target_line":"@app.get(",
    "context_after":"    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):"
  },
  {
    "context_before":"\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(",
    "target_line":"\"\/items\/{item_id}\/name\",",
    "context_after":"    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",",
    "target_line":"response_model=Item,",
    "context_after":"    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,",
    "target_line":"response_model_include=[\"name\", \"description\"],",
    "context_after":")\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)",
    "target_line":"async def read_item_name(item_id: str):",
    "context_after":"    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])",
    "context_after":"async def read_item_public_data(item_id: str):\n    return items[item_id]"
  },
  {
    "context_before":"        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])",
    "target_line":"async def read_item_public_data(item_id: str):",
    "context_after":"    return items[item_id]"
  },
  {
    "context_before":"    },\n}\n\n\n@app.get(\n    \"\/items\/{item_id}\/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"\/items\/{item_id}\/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):",
    "target_line":"return items[item_id]",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "context_after":"    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "target_line":"q: Annotated[str | None, Query(alias=\"item-query\")] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "context_after":"    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "target_line":"q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "context_after":"    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "target_line":"q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: int = Path(title=\"The ID of the item to get\"),",
    "context_after":"    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),",
    "target_line":"q: str | None = Query(default=None, alias=\"item-query\"),",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: int = Path(title=\"The ID of the item to get\"),",
    "context_after":"    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),",
    "target_line":"q: Union[str, None] = Query(default=None, alias=\"item-query\"),",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "context_after":"    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "target_line":"q: Annotated[str | None, Query(alias=\"item-query\")] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "context_after":"    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "target_line":"q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "context_after":"    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],",
    "target_line":"q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: int = Path(title=\"The ID of the item to get\"),",
    "context_after":"    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),",
    "target_line":"q: str | None = Query(default=None, alias=\"item-query\"),",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: int = Path(title=\"The ID of the item to get\"),",
    "context_after":"    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),",
    "target_line":"q: Union[str, None] = Query(default=None, alias=\"item-query\"),",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):",
    "context_after":"    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):",
    "context_after":"    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):",
    "context_after":"    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):",
    "context_after":"    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"*, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],",
    "context_after":"    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],",
    "target_line":"q: str,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):"
  },
  {
    "context_before":"from fastapi import FastAPI, Path",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],",
    "context_after":"    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],",
    "target_line":"q: str,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,",
    "target_line":"item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),",
    "context_after":"    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),",
    "target_line":"q: str,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "context_after":"    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "target_line":"q: str,",
    "context_after":"    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,",
    "target_line":"size: Annotated[float, Query(gt=0, lt=10.5)],",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"if size:",
    "context_after":"        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:",
    "target_line":"results.update({\"size\": size})",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "context_after":"    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "target_line":"q: str,",
    "context_after":"    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,",
    "target_line":"size: Annotated[float, Query(gt=0, lt=10.5)],",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"if size:",
    "context_after":"        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:",
    "target_line":"results.update({\"size\": size})",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path, Query",
    "context_after":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n",
    "target_line":"@app.get(\"\/items\/{item_id}\")",
    "context_after":"async def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")",
    "target_line":"async def read_items(",
    "context_after":"    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,",
    "target_line":"item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),",
    "context_after":"    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),",
    "target_line":"q: str,",
    "context_after":"    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,",
    "target_line":"size: float = Query(gt=0, lt=10.5),",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    if size:\n        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"if size:",
    "context_after":"        results.update({\"size\": size})\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:",
    "target_line":"results.update({\"size\": size})",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\n@app.get(\"\/items\/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "context_after":"    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "target_line":"q: str | None = None,",
    "context_after":"    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,",
    "target_line":"item: Item | None = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"if item:",
    "context_after":"        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:",
    "target_line":"results.update({\"item\": item})",
    "context_after":"    return results"
  },
  {
    "context_before":"    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "context_after":"    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "target_line":"q: Union[str, None] = None,",
    "context_after":"    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,",
    "target_line":"item: Union[Item, None] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"if item:",
    "context_after":"        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:",
    "target_line":"results.update({\"item\": item})",
    "context_after":"    return results"
  },
  {
    "context_before":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path",
    "target_line":"from pydantic import BaseModel",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(",
    "target_line":"item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "context_after":"    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],",
    "target_line":"q: Union[str, None] = None,",
    "context_after":"    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,",
    "target_line":"item: Union[Item, None] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"if item:",
    "context_after":"        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:",
    "target_line":"results.update({\"item\": item})",
    "context_after":"    return results"
  },
  {
    "context_before":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from fastapi import FastAPI, Path",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:"
  },
  {
    "context_before":"from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,",
    "target_line":"item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),",
    "context_after":"    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),",
    "target_line":"q: str | None = None,",
    "context_after":"    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,",
    "target_line":"item: Item | None = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"if item:",
    "context_after":"        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:",
    "target_line":"results.update({\"item\": item})",
    "context_after":"    return results"
  },
  {
    "context_before":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI, Path",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,",
    "target_line":"item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),",
    "context_after":"    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),",
    "target_line":"q: Union[str, None] = None,",
    "context_after":"    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,",
    "target_line":"item: Union[Item, None] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):",
    "target_line":"results = {\"item_id\": item_id}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    if item:\n        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"if item:",
    "context_after":"        results.update({\"item\": item})\n    return results"
  },
  {
    "context_before":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:",
    "target_line":"results.update({\"item\": item})",
    "context_after":"    return results"
  },
  {
    "context_before":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item, user: User):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user}",
    "context_after":"    return results"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item, user: User):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user}",
    "context_after":"    return results"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item("
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(",
    "target_line":"item_id: int, item: Item, user: User, importance: Annotated[int, Body()]",
    "context_after":"):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    return results"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item("
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(",
    "target_line":"item_id: int, item: Item, user: User, importance: Annotated[int, Body()]",
    "context_after":"):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    return results"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item("
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(",
    "target_line":"item_id: int, item: Item, user: User, importance: Annotated[int, Body()]",
    "context_after":"):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    return results"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item, user: User, importance: int = Body()):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    return results"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item, user: User, importance: int = Body()):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
  },
  {
    "context_before":"\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    return results"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item("
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,",
    "target_line":"item_id: int,",
    "context_after":"    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,",
    "target_line":"item: Item,",
    "context_after":"    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,",
    "target_line":"user: User,",
    "context_after":"    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,",
    "target_line":"importance: Annotated[int, Body(gt=0)],",
    "context_after":"    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],",
    "target_line":"q: str | None = None,",
    "context_after":"):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item("
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,",
    "target_line":"item_id: int,",
    "context_after":"    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,",
    "target_line":"item: Item,",
    "context_after":"    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,",
    "target_line":"user: User,",
    "context_after":"    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,",
    "target_line":"importance: Annotated[int, Body(gt=0)],",
    "context_after":"    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],",
    "target_line":"q: Union[str, None] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item("
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],"
  },
  {
    "context_before":"from pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,",
    "target_line":"item_id: int,",
    "context_after":"    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,",
    "target_line":"item: Item,",
    "context_after":"    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,",
    "target_line":"user: User,",
    "context_after":"    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,",
    "target_line":"importance: Annotated[int, Body(gt=0)],",
    "context_after":"    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],",
    "target_line":"q: Union[str, None] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item("
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: str | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,",
    "target_line":"item_id: int,",
    "context_after":"    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,",
    "target_line":"item: Item,",
    "context_after":"    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,",
    "target_line":"user: User,",
    "context_after":"    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,",
    "target_line":"importance: int = Body(gt=0),",
    "context_after":"    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),",
    "target_line":"q: str | None = None,",
    "context_after":"):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    username: str\n    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"    full_name: str | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item("
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"class User(BaseModel):",
    "context_after":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):",
    "target_line":"username: str",
    "context_after":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str",
    "target_line":"full_name: Union[str, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:"
  },
  {
    "context_before":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(",
    "context_after":"    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})"
  },
  {
    "context_before":"class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,",
    "target_line":"item_id: int,",
    "context_after":"    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,",
    "target_line":"item: Item,",
    "context_after":"    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,",
    "target_line":"user: User,",
    "context_after":"    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,",
    "target_line":"importance: int = Body(gt=0),",
    "context_after":"    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),",
    "target_line":"q: Union[str, None] = None,",
    "context_after":"):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}",
    "context_after":"    if q:\n        results.update({\"q\": q})\n    return results"
  },
  {
    "context_before":"    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:",
    "target_line":"results.update({\"q\": q})",
    "context_after":"    return results"
  },
  {
    "context_before":"    full_name: Union[str, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
  },
  {
    "context_before":"from fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = None",
    "context_after":"    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None",
    "target_line":"price: float",
    "context_after":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float",
    "target_line":"tax: float | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item = Body(embed=True)):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = None",
    "context_after":"    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "target_line":"price: float",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item = Body(embed=True)):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"from pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field("
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: float | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field("
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: float | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item = Body(embed=True)):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field("
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item = Body(embed=True)):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field("
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: float | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field("
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: str | None = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: float | None = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item = Body(embed=True)):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field("
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Body, FastAPI",
    "context_after":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI",
    "target_line":"from pydantic import BaseModel, Field",
    "context_after":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n",
    "target_line":"class Item(BaseModel):",
    "context_after":"    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):",
    "target_line":"name: str",
    "context_after":"    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str",
    "target_line":"description: Union[str, None] = Field(",
    "context_after":"        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(",
    "target_line":"default=None, title=\"The description of the item\", max_length=300",
    "context_after":"    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )",
    "target_line":"price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "context_after":"    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")",
    "target_line":"tax: Union[float, None] = None",
    "context_after":"\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n",
    "target_line":"@app.put(\"\/items\/{item_id}\")",
    "context_after":"async def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"from pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")",
    "target_line":"async def update_item(item_id: int, item: Item = Body(embed=True)):",
    "context_after":"    results = {\"item_id\": item_id, \"item\": item}\n    return results"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):",
    "target_line":"results = {\"item_id\": item_id, \"item\": item}",
    "context_after":"    return results"
  },
  {
    "context_before":"app = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"\/items\/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}",
    "target_line":"return results",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "context_after":"    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "context_after":"    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "context_after":"    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "context_after":"    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "context_after":"    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "context_after":"    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: dict = Depends(common_parameters)):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: dict = Depends(common_parameters)):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Annotated\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "context_after":"    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"CommonsDep = Annotated[dict, Depends(common_parameters)]",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: CommonsDep):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"app = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: CommonsDep):",
    "context_after":"    return commons"
  },
  {
    "context_before":"\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Annotated, Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
  },
  {
    "context_before":"from typing import Annotated, Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"CommonsDep = Annotated[dict, Depends(common_parameters)]",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: CommonsDep):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: CommonsDep):",
    "context_after":"    return commons"
  },
  {
    "context_before":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):",
    "target_line":"return commons",
    "context_after":""
  },
  {
    "context_before":"",
    "target_line":"from typing import Union",
    "context_after":"\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):"
  },
  {
    "context_before":"from typing import Union\n",
    "target_line":"from fastapi import Depends, FastAPI",
    "context_after":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI",
    "target_line":"from typing_extensions import Annotated",
    "context_after":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n",
    "target_line":"app = FastAPI()",
    "context_after":"\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n",
    "target_line":"async def common_parameters(",
    "context_after":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(",
    "target_line":"q: Union[str, None] = None, skip: int = 0, limit: int = 100",
    "context_after":"):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):",
    "target_line":"return {\"q\": q, \"skip\": skip, \"limit\": limit}",
    "context_after":"\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n"
  },
  {
    "context_before":"from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n",
    "target_line":"CommonsDep = Annotated[dict, Depends(common_parameters)]",
    "context_after":"\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"from fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n",
    "target_line":"@app.get(\"\/items\/\")",
    "context_after":"async def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"from typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")",
    "target_line":"async def read_items(commons: CommonsDep):",
    "context_after":"    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):",
    "target_line":"return commons",
    "context_after":"\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n",
    "target_line":"@app.get(\"\/users\/\")",
    "context_after":"async def read_users(commons: CommonsDep):\n    return commons"
  },
  {
    "context_before":"async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")",
    "target_line":"async def read_users(commons: CommonsDep):",
    "context_after":"    return commons"
  },
  {
    "context_before":"    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"\/items\/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"\/users\/\")\nasync def read_users(commons: CommonsDep):",
    "target_line":"return commons",
    "context_after":""
  }
]